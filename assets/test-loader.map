{"version":3,"sources":["app/test-loader.js","start.js"],"sourcesContent":["/* globals requirejs, require */\n(function() {\ndefine(\"ember-cli/test-loader\",\n  [],\n  function() {\n    \"use strict\";\n\n    var moduleIncludeMatchers = [];\n    var moduleExcludeMatchers = [];\n\n    function addModuleIncludeMatcher(fn) {\n      moduleIncludeMatchers.push(fn);\n    };\n\n    function addModuleExcludeMatcher(fn) {\n      moduleExcludeMatchers.push(fn);\n    };\n\n    function checkMatchers(matchers, moduleName) {\n      var matcher;\n\n      for (var i = 0, l = matchers.length; i < l; i++) {\n        matcher = matchers[i];\n\n        if (matcher(moduleName)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function TestLoader() {\n      this._didLogMissingUnsee = false;\n    };\n\n    TestLoader.prototype = {\n      shouldLoadModule: function(moduleName) {\n        return (moduleName.match(/[-_]test$/));\n      },\n\n      listModules: function() {\n        return Object.keys(requirejs.entries);\n      },\n\n      loadModules: function() {\n        var moduleName, index, length;\n        var moduleNames = this.listModules();\n\n        for (index = 0, length = moduleNames.length; index < length; index++) {\n          moduleName = moduleNames[index];\n\n          if (checkMatchers(moduleExcludeMatchers, moduleName)) {\n            continue;\n          }\n\n          if (checkMatchers(moduleIncludeMatchers, moduleName) || this.shouldLoadModule(moduleName)) {\n            this.require(moduleName);\n            this.unsee(moduleName);\n          }\n        }\n      }\n    };\n\n    TestLoader.prototype.require = function(moduleName) {\n      try {\n        require(moduleName);\n      } catch(e) {\n        this.moduleLoadFailure(moduleName, e);\n      }\n    };\n\n   TestLoader.prototype.unsee = function(moduleName) {\n     if (typeof require.unsee === 'function') {\n       require.unsee(moduleName);\n     } else if (!this._didLogMissingUnsee) {\n      this._didLogMissingUnsee = true;\n      if (typeof console !== 'undefined') {\n        console.warn('unable to require.unsee, please upgrade loader.js to >= v3.3.0');\n      }\n     }\n    };\n\n    TestLoader.prototype.moduleLoadFailure = function(moduleName, error) {\n      console.error('Error loading: ' + moduleName, error.stack);\n    };\n\n    TestLoader.load = function() {\n      new TestLoader().loadModules();\n    };\n\n    return {\n      'default': TestLoader,\n      addModuleIncludeMatcher: addModuleIncludeMatcher,\n      addModuleExcludeMatcher: addModuleExcludeMatcher\n    };\n  }\n);\n})();\n","/*global QUnit, blanket, mocha, moduleLoaderFinish, $ */\n\nvar debug = function (msg) {\n\tvar cliOptions = blanket.options('cliOptions') || {};\n\tif (cliOptions.debugCLI) {\n\t\tconsole.log('[ember-cli-blanket]:' + msg);\n\t}\n};\n\nfunction sendCoverage(completion) {\n\ttry {\n\t\tvar rawData = window._$blanket_coverageData;\n\n\t\tvar data = JSON.stringify(rawData);\n\t\tdebug('data size: ' + data.length);\n\t\t$.ajax({\n\t\t\ttype: 'POST',\n\t\t\tasync: false,\n\t\t\turl:'/write-blanket-coverage',\n\t\t\tdatatype: 'json',\n\t\t\tcontentType:'application/json; charset=utf-8',\n\t\t\tdata: data,\n\t\t\terror: function(jqXHR, textStatus, errorThrown ) {\n\t\t\t\tconsole.log('[ember-cli-blanket]:' + textStatus + ': ' + errorThrown + ' while writing blanket coverage');\n\t\t\t},\n\t\t\tcomplete: completion\n\t\t  });\n\t} catch(err) {\n\t\tconsole.error('JSON stringify error:', err);\n\t\tthrow err;\n\t}\n}\n\nvar origBlanketOnTestsDone = blanket.onTestsDone;\n\nfunction cliFinish() {\n\tmoduleLoaderFinish();\n\torigBlanketOnTestsDone.apply(blanket);\n\tsendCoverage(function() {\n\t\tdebug('done writing coverage');\n\t});\n}\n\nblanket.onTestsDone = cliFinish;\n\nif (typeof(QUnit) === 'object') {\n  QUnit.config.autostart = blanket.options('cliOptions').autostart !== false;\n}\nelse if (typeof(mocha) === 'object') {\n\n    /*\n    * Mocha-BlanketJS adapter\n    * Adds a BlanketJS coverage report at the bottom of the HTML Mocha report\n    * Only needed for in-browser report; not required for the grunt/phantomjs task\n    *\n    * Distributed as part of the grunt-blanket-mocha plugin\n    * https://github.com/ModelN/grunt-blanket-mocha\n    * (C)2013 Model N, Inc.\n    * Distributed under the MIT license\n    *\n    * Code originally taken from the BlanketJS project:\n    * https://github.com/alex-seville/blanket/blob/master/src/adapters/mocha-blanket.js\n    * Distributed under the MIT license\n    */\n    (function() {\n\n        if(!mocha) {\n            throw new Error(\"mocha library does not exist in global namespace!\");\n        }\n\n\n        /*\n         * Mocha Events:\n         *\n         *   - `start`  execution started\n         *   - `end`  execution complete\n         *   - `suite`  (suite) test suite execution started\n         *   - `suite end`  (suite) all tests (and sub-suites) have finished\n         *   - `test`  (test) test execution started\n         *   - `test end`  (test) test completed\n         *   - `hook`  (hook) hook execution started\n         *   - `hook end`  (hook) hook complete\n         *   - `pass`  (test) test passed\n         *   - `fail`  (test, err) test failed\n         *\n         */\n\n        var originalReporter = mocha._reporter;\n\n        var blanketReporter = function(runner) {\n                runner.on('start', function() {\n                  blanket.setupCoverage();\n                });\n\n                runner.on('end', function() {\n                  blanket.onTestsDone();\n                });\n                runner.on('suite', function() {\n                    blanket.onModuleStart();\n                });\n\n                runner.on('test', function() {\n                    blanket.onTestStart();\n                });\n\n                runner.on('test end', function(test) {\n                    blanket.onTestDone(test.parent.tests.length, test.state === 'passed');\n                });\n\n                //I dont know why these became global leaks\n                runner.globals(['stats', 'failures', 'runner', '_$blanket']);\n\n                originalReporter.apply(this, [runner]);\n            };\n\n        blanketReporter.prototype = originalReporter.prototype;\n\n        mocha.reporter(blanketReporter);\n    })();\n}\n"],"names":[],"mappingslfile":"test-loader.js"}