{"version":3,"sources":["blanket-reporter.js","blanket-require.js"],"sourcesContent":["/*global blanket */\n(function() {\n  //TODO: Refactor/cleanup\n  blanket.customReporter = function(coverageData) {\n    var fileCoverage = [];\n    // Since blanket stores additional properties on arrays, pull them out and put them on objects\n    // or else when we send to the reporter using JSON.stringify those properties won't be included.\n    for (var x in coverageData.files) {\n      var fileData = coverageData.files[x];\n      var branchData = [];\n      for (var branchIndex in fileData.branchData) {\n        if (fileData.branchData.hasOwnProperty(branchIndex)) {\n          var cols = fileData.branchData[branchIndex];\n          var newCols = [];\n          for (var colIndex in cols) {\n            if (cols.hasOwnProperty(colIndex)) {\n              var thisline = cols[colIndex];\n              var updatedLine = {};\n              for (var modeIndex in thisline) {\n                if (thisline.hasOwnProperty(modeIndex)) {\n                  updatedLine[modeIndex] = thisline[modeIndex];\n                }\n              }\n              newCols[colIndex] = updatedLine;\n            }\n          }\n          branchData[branchIndex] = newCols;\n        }\n      }\n      fileCoverage.push({\n        fileName: x,\n        lines: fileData,\n        source: fileData.source,\n        branchData: branchData\n      });\n    }\n    // Create our own data structure to insulate from blanket's internals\n    window._$blanket_coverageData = {\n      fileData: fileCoverage,\n      stats: coverageData.stats\n    };\n    // Call the standard reporter well to get inline data (assuming you're running in browser)\n    blanket.defaultReporter(coverageData);\n  };\n\n})();\n","/* globals QUnit, blanket, loader, moduleLoaderFinish:true, requirejs */\n\n// This could be a documented capability and move it out of blanket-loader\n// it works, can't put it in test-helper b/c it loads too late\nvar seen = {};\nvar inBrowser = typeof window !== 'undefined' && this === window;\nblanket.options('enableCoverage',inBrowser && window.location.search.indexOf('coverage') > -1);\n\n\nvar debug = function(msg) {\n    var cliOptions = blanket.options('cliOptions') || {};\n\tif (cliOptions.debugCLI) {\n\t\tconsole.log('[ember-cli-blanket]:' + msg);\n\t}\n};\n\n\nvar blanketLoader = function(moduleName, callback) {\n    blanket.requiringFile(moduleName);\n    var content = '(' + callback.toString() + ');//# sourceURL=' + moduleName + '.js';\n    blanket.requiringFile(moduleName, true);\n    try {\n        var result = blanket.instrumentSync({\n            inputFile: content,\n            inputFileName: moduleName\n        });\n\n        return eval(result);\n    } catch (err) {\n        console.log(err);\n    }\n    return eval(content);\n};\n\n// Defer the start of the test run until a call to QUnit.start() this\n// allows the modules to be loaded/instrumented prior to the test run\nif (typeof(QUnit) === 'object') {\n    QUnit.config.autostart = false;\n}\n\nvar blanketWontCover = function(moduleName) {\n    var anti = blanket.utils.matchPatternAttribute(moduleName, blanket.options('antifilter'));\n    var match = !blanket.utils.matchPatternAttribute(moduleName, blanket.options('filter'));\n    return anti || match;\n};\n\nvar shouldExclude = function(moduleName) {\n    if (moduleName.indexOf(blanket.options('modulePrefix')) === -1) {\n      return blanketWontCover(moduleName);\n    }\n\n    if ( moduleName === blanket.options('modulePrefix') ) {\n        return true;\n    }\n\n    // Loader exclusions are no longer necessary to fix conflicts with addon modules\n    // but may still be used to remove data coverage for specific files (e.g. config/environment).\n    var exclude = false;\n    if (blanket.options('loaderExclusions')) {\n        blanket.options('loaderExclusions').forEach(function (loaderExclusion) {\n            if (moduleName.indexOf(loaderExclusion) > -1) {\n                exclude = true;\n            }\n        });\n    }\n    if (exclude || blanketWontCover(moduleName)) {\n        return true;\n    }\n    return exclude;\n};\n\n\n\n// proxy require to give us a chance to blanket required files\nif (blanket.options('enableCoverage')) {\n    loader.wrapModules = function(name, callback) {\n            if (typeof(seen[name]) === 'undefined') {\n                if (!shouldExclude(name)) {\n                    seen[name] = true;\n                    debug('requiring module: ' + name);\n\n                    return blanketLoader(name, callback);\n                }\n            }\n            return callback;\n    };\n    blanket.options('reporter', blanket.customReporter);\n}\n\nif (typeof exports !== 'undefined') {\n    module.exports = {\n        shouldExclude: shouldExclude\n    };\n}\n\n\n/*\n * After running all the tests we'll loop over all matching requirejs\n * entries and annotate them so blanket will indicate their non-coverage\n */\nmoduleLoaderFinish = function() {\n  if (blanket.options('enableCoverage')) {\n    for (var moduleName in requirejs.entries) {\n      if (typeof(seen[moduleName]) === 'undefined') {\n        if (!shouldExclude(moduleName)) {\n          try {\n            debug('requiring unseen module: ' + moduleName);\n            require(moduleName);\n            seen[moduleName] = true;\n\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n};\n"],"names":[],"mappingsfile":"blanket-loader.js"}